单词
MULTIKEY
	conversion of ASCII characters to uppercase.
Removal
reordering
bump
associated
brevity
下午
color primaries
chroma
aspect ratio
clip


目的是使用ffplay播放h264封装格式 
在stream_open(input_filename, file_iformat);
fileiformat==NULL.
在format_opts->elems
  key = scan_all_pmts, value = 1;

init_dynload()
av_log_set_flags(AV_LOG_SKIP_REPEATED);
parse_loglevel(argc, argv, options);
avdevice_register_all();
avformat_network_init();
init_opts();
show_banner(argc, argv, options);
parse_options(NULL, argc, argv, options, opt_input_file);
	DL_Init (flags)
SDL_EventState(SDL_SYSWMEVENT, SDL_IGNORE);
SDL_EventState(SDL_USEREVENT, SDL_IGNORE);	

av_init_packet(&flush_pkt);
window = SDL_CreateWindow(program_name, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, default_width, default_height, flags);
SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "linear");
renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
is = stream_open(input_filename, file_iformat);
	VideoState *is;
	SDL_CreateThread(read_thread, "read_thread", is);
	//read_thread
		avformat_alloc_context()
		avformat_open_input(&ic, is->filename, is->iformat, &format_opts);
		av_format_inject_global_side_data(ic);
		setup_find_stream_info_opts(ic, codec_opts)
		avformat_find_stream_info(ic, opts);
		avformat_seek_file(ic, -1, INT64_MIN, timestamp, INT64_MAX, 0);
		avformat_match_stream_specifier(ic, st, wanted_stream_spec[type]) > 0)
		av_find_best_stream(ic, AVMEDIA_TYPE_VIDEO,st_index[AVMEDIA_TYPE_VIDEO], -1, NULL, 0);
		av_guess_sample_aspect_ratio(ic, st, NULL);
		stream_component_open(is, st_index[AVMEDIA_TYPE_VIDEO]){
			avctx = avcodec_alloc_context3(NULL);
			ret = avcodec_parameters_to_context(avctx, ic->streams[stream_index]->codecpar);
			codec = avcodec_find_decoder(avctx->codec_id);
			codec = avcodec_find_decoder_by_name(forced_codec_name);
			opts = filter_codec_opts(codec_opts, avctx->codec_id, ic, ic->streams[stream_index], codec);
			av_dict_get(opts, "threads", NULL, 0);
			av_dict_set(&opts, "threads", "auto", 0);
			av_dict_set_int(&opts, "lowres", stream_lowres, 0);
			switch(video)
			{
				decoder_init(&is->viddec, avctx, &is->videoq, is->continue_read_thread);
				decoder_start(&is->viddec, video_thread, "video_decoder", is){
					 packet_queue_start(d->queue);
					 SDL_CreateThread(fn, thread_name, arg);
									thread_name = video_thread
				}
			}
		}
		
		for{
			avformat_seek_file(is->ic, -1, seek_min, seek_target, seek_max, is->seek_flags);
		}
		if(is->video_stream >= 0) {
            packet_queue_flush(&is->videoq);
            packet_queue_put(&is->videoq, &flush_pkt);
        }
        
        stream_has_enough_packets
        SDL_LockMutex(wait_mutex);
        SDL_CondWaitTimeout(is->continue_read_thread, wait_mutex, 10);
        SDL_UnlockMutex(wait_mutex);
        
        ret = av_read_frame(ic, pkt);
        packet_queue_put_nullpacket(&is->videoq, is->video_stream);
        //这里开始解读
						video_thread{
							for (;;) {
							ret = get_video_frame(is, frame);
							???
							configure_video_filters(graph, is, vfilters_list ? vfilters_list[is->vfilter_idx] : NULL, frame)) < 0) {
							queue_picture(is, frame, pts, duration, frame->pkt_pos, is->viddec.pkt_serial)
						}
							queue_picture{
								    set_default_window_size(vp->width, vp->height, vp->sar);
									av_frame_move_ref(vp->frame, src_frame);
									frame_queue_push(&is->pictq);
							}
								    frame_queue_push(FrameQueue *f){							
										SDL_LockMutex(f->mutex);
										SDL_CondSignal(f->cond);
										SDL_UnlockMutex(f->mutex);
									}
	av_read_frame(ic, pkt);									

整个的处理过程 
	main()
	{
		SDL_CreateThread(read_thread, "read_thread", is){
			1 创建线程
			stream_component_open(){
				创建线程
				video_thread{
					for{
						get_video_frame(is, frame);	
						queue_picture{
							设置SDL窗口大小.
							SDL队列???
							我的理解感觉是get_video_frame来设置窗口的大小
						}
					}
				}
			}
			2 更新数据包
			for{
				视频packet.
				音频packet.
				字幕packet.
			}
		event_loop(is);
	}
